#!/usr/bin/env python

from os.path import basename
import numpy as np
import json
from spikeforest2_utils import AutoRecordingExtractor, MdaRecordingExtractor, MdaSortingExtractor
import hither
import kachery as ka
import os

studySetName = 'LONG_STATIC'
path_from = '/mnt/ceph/users/jjun/groundtruth/long_static'
path_to = '/mnt/home/jjun/src/spikeforest_recordings/recordings/LONG_STATIC'

def register_recording_test(*, recdir, output_fname, label, to='default_readwrite'):
    print(f'''
        recdir: {recdir}
        output_fname: {output_fname}
        label: {label}
        to: {to}
    ''')


def register_recording(*, recdir, output_fname, label, to='default_readwrite'):
    with ka.config(to=to):
        raw_path = ka.store_file(recdir + '/raw.mda')
        obj = dict(
            raw=raw_path,
            params=ka.load_object(recdir + '/params.json'),
            geom=np.genfromtxt(ka.load_file(recdir + '/geom.csv'), delimiter=',').tolist()
        )
        obj['self_reference'] = ka.store_object(obj, basename='{}.json'.format(label))
        with open(output_fname, 'w') as f:
            json.dump(obj, f, indent=4)


def register_groundtruth(*, recdir, output_fname, label, to='default_readwrite'):
    with ka.config(to=to):
        firings_path = ka.store_file(recdir + '/firings_true.mda')
        obj = dict(
            firings=firings_path
        )
        obj['self_reference'] = ka.store_object(obj, basename='{}.firings_true.json'.format(label))
        with open(output_fname, 'w') as f:
            json.dump(obj, f, indent=4)

def join_path(a, b):
    return a + '/' + b

def mkdir_(path_to):
    if not os.path.exists(path_to):
        print(f'{path_to} is created')
        os.mkdir(path_to)


def register_study(*, path_from, path_to, studySetName, studyName, to='default_readwrite'):
    list_rec = [str(f) for f in os.listdir(path_from) if os.path.isdir(os.path.join(path_from, f))]
    print('# files: {}'.format(len(list_rec)))
    study_obj = dict(
        name=studyName,
        studySetName=studySetName,
        recordings=[]
    )
    mkdir_(path_to)
    for rec1 in list_rec:
        print(f'Uploading {rec1}')
        path_rec1 = os.path.join(path_from, rec1)
        register_groundtruth(recdir=path_rec1, output_fname=os.path.join(path_to, rec1+'.firings_true.json'), label=rec1)
        rec = MdaRecordingExtractor(recording_directory=path_rec1)
        sorting = MdaSortingExtractor(firings_file=path_rec1 + '/firings_true.mda', 
            samplerate=rec.get_sampling_frequency())
        recording_obj = dict(
            name=rec1,
            studyName=studyName,
            studySetName=studySetName,
            directory=ka.store_dir(path_rec1),
            firingsTrue=ka.store_file(os.path.join(path_to, rec1+'.firings_true.json'), basename='firings_true.json'),
            sampleRateHz=rec.get_sampling_frequency(),
            numChannels=len(rec.get_channel_ids()),
            durationSec=rec.get_num_frames() / rec.get_sampling_frequency(),
            numTrueUnits=len(sorting.get_unit_ids()),
            spikeSign=-1 # TODO: get this from params.json
        )
        study_obj['recordings'].append(recording_obj)
        # update .json files
        register_recording(recdir=path_rec1, output_fname=os.path.join(path_to, rec1+'.json'), label=rec1)
    study_obj['self_reference'] = ka.store_object(study_obj)
    with open(os.path.join(path_to, studyName + '.json'), 'w') as f:
        json.dump(study_obj, f, indent=4)
    return study_obj
    
ka.set_config(
    fr='default_readwrite',
    to='default_readwrite'
)

mkdir_(path_to)
list_study_obj = []
list_study_name = [str(f) for f in os.listdir(path_from) if os.path.isdir(os.path.join(path_from, f))]
for study_name in list_study_name:
    studyName = studySetName + '_' + study_name
    study_obj = register_study(
        path_from = join_path(path_from, study_name),
        path_to = join_path(path_to, studyName),
        studySetName = studySetName,
        studyName = studyName
    )
    list_study_obj.append(study_obj)

studyset_obj = dict(
    name=studySetName,
    info=dict(
        label=studySetName,
        electrode_type='silicon-probe',
        doi='',
        ground_truth='eMouse simulator from Kilosort2 (fixed probe position)',
        organism='',
        source='Jennifer Colonell and Marius Pachitariu',
        labels=["Simulated recording"]
    ),
    description='''\
    This synthetic groundtruth is generated by a modifying the Kilosort2 eMouse simulator 
    developed by J. Colonell and M. Pachitariu. This simulator uses averaged
    unit waveforms from the recordings taken from the Kampff laboratory using a densely 
    spaced electrode array (15 x 17 layout spanning 100 x 102 micrometers). Probe position 
    is fixed for the duration of simulation (64 channels, Neuropixels layout). 
    To study the effect of time duration and channel count on the sorting accuracy, 
    we extracted 8 or 16 channels from the original output (64 chans, 80 min) by taking 
    a contiguous neighboring channels at various time durations (5, 10, 20, 40, 80 min) 
    starting at t=0. Ten recordings were sampled from each channel count and time duration by 
    uniformly varying the channel offsets. 

    The simulation inserted waveform templates at random channels and time points after
    multiplying them by a random scaling factor drawn from a Gamma distribution. 
    The baseline noise was randomly generated to match the power spectrum observed from 
    a Neuropixels recording, and a spatiotemporal smoothing was applied to induce 
    correlation between nearby channels and time samples.
    ''',
    studies=list_study_obj
)

studyset_obj['self_reference'] = ka.store_object(studyset_obj)
with open(os.path.join(path_to, studySetName + '.json'), 'w') as f:
    json.dump(studyset_obj, f, indent=4)
